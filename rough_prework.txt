Unbounded Solution: In the simplex method, if in the pivot column all the entries are negative or zero when choosing to leave the variable then the solution is unbounded. 
2. Infeasible Solution: In the simplex method, if artificial variables are present in the basis, then the solution obtained is infeasible.


the other condition that needs to be checked is if  c and d= something
ketan confirmed via an example that the above criteria written for infeaasible solution is correct and needs to be added to our code.



tasks:
- conv max to min prob by assuming certain input format and while displaying final result negate values appropriately
- deal with cases that lead to infeasible solutions 
    - c > d
    - ketan's point today (artificial problem doesn't have optimal solution) --cost must be 0
-slack variables may lead to the formation of redundant equations ( as c <= d may occur)



problem how do we detect that a variable is allowed to be negative for instance -3 <= x1 <= 6
soln: for each variable treat it as x = u - v


problem how to remove reduundant equations 
solution:
    write a matrix corressponding to constraints(A|b)
    reduce the augmented matrx into rref
    if a row comprises of only zeroes 
    or it has non-zero values only corresponding to slack variables delete the row( that won't work )
        why it won't work 
        4x1+6x2 <= 42
        2x1 + 3x2 <= 21 ---
        2x1+3x2 <= 6



1. max to min and the inequalities
    a) max to min: make separate lists for less than and greater than
2. all >= 0 
-- use aryan's intercept trick to remove redundant eqns -- we are not using this anymore
3. slack
4. infeasiblility -- the two cases 
    a) c > d
    b) no optimal solution for the aritficial problem


**for a maximization problem, the bottom right corner of the matrix is the actual maximized cost
**for a minimization problem, the bottom right corner of the matrix is the negative of the minimized cost
// so while reporting the final answer take care....


do infeasiblility exit from code when it occurs


floating point errors, 7.7777777777777777777776 - 7.777777777777777775 = 1e-16 or something like that, but it should be approximated to 0


A, b, unit_cost, slack_start = transform_to_standard_lp('MAX', 3, [[2, 1, 3, 10], [3, 4, 2, 12], [1, 2, 4, 8]], [[-1, -2, -3, -5]], [], [-8, -6, -7])
cool_tab=Tableau(A=A,unit_cost=unit_cost,b=b)
cool_tab.solve()
cool_tab.printMat()
print(cool_tab.basis_ordering)

print('###############################################$$')
cool_tab.displayans(slack_start=slack_start)


ketan changed the criteria for infeasibility and saved us